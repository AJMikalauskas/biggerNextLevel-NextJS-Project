// This is the startup page, or localhost:3000/
    // show MeetupList.js here -> send up dummy data/meetups data via props of meetups -> make sure to import
        // plug in dummy data to props of MeetupList import -> will eventually change to fetch in backend API

// You can add metadata to the head tags in the html. Some may include to add a description while searching or a page title shown in the tab
    // Add by using the Head import from 'next/head'. Add in JSX of the below HomePage(props);
import Head from 'next/head';
//import { useEffect, useState } from 'react';
//import Layout from "../components/layout/Layout";
import { Fragment } from 'react';
import MeetupList from "../components/meetups/MeetupList";
import { MongoClient } from "mongodb" ;

// const DUMMY_MEETUPS = [
//     {  
//         id: 'm1',
//         title: 'A First Meetup',
//         image: "https://thumbor.thedailymeal.com/OaCGsIE1iH7uob0N5wZYP56pvlk=/1560x390/filters:focal(805x899:806x900):format(webp)/https://www.theactivetimes.com/sites/default/files/2020/05/13/Nature_Photos_Getty_hero.jpg",
//         address: "Some Address 1, 12345 Clown City",
//         description: "This is a first meetup!"
//     },
//     {
//         id: 'm2',
//         title: 'A Second Meetup',
//         image: "https://www.planetware.com/wpimages/2020/01/pennsylvania-in-pictures-beaufiful-places-to-photograph-delaware-water-gap.jpg",
//         address: "Some Address 2, 678910 Gotham City",
//         description: "This is a Second Meetup!"
//     }
// ]

// Get setup for calling to backend at start of page by useEffect, useState imports
function HomePage(props) {
    /* SEO becomes messed up this way, uses first HTML load/render, list items aren't shown in the view source right click
         This helps to show that call to backend wouldn't show, a minor flaw in NextJS, but there is a solution...

     This state will store the meetups data, as of start, set to empty array
     const [loadedMeetups, setLoadedMeetups] = useState([]);
     useEffect() on start of page to retrieve data from backend -> no backend yet, but just retrieve dummy data
          empty dependency array, send loadedMeetups which is changed by state in useEffect()
              set props of meetups to loadedMeetups
     useEffect(() =>{
         setLoadedMeetups(DUMMY_MEETUPS);
     }, []); */

    return(
        <Fragment>
            {/*  use <Head></Head> tags in this
         Layout uses MainNavigation.js
             make sure to import Link from 'next/link'
             in MainNavigation.js or else an error will show.
             not react router either so change to property to href property
             no need for Layout wrapper here, only in _app.js
        <Layout>
            make sure to change this to props.meetups which is called from props in function below
        </Layout> */}
            <Head>
                {/* Title of Page in MetaData is React Meetups, not localhost:3000 anymore -> can also see in devtools and view source of page */}
                <title>React Meetups!</title>
                {/* This is the meta description, Google's is "Search the world's information, including webpages, images, videos and more. 
                Google has many special features to help you find exactly what you're looking ..." */}
                <meta name="description" content='Browse a huge list of highly active React meetups!' />
            </Head>
        <MeetupList meetups={props.meetups}/>
        </Fragment>
    );
}

// re-runs on every request which may seem positive, but could be negative by:
    // needing to wait for page to be generated by every incoming request
        // If page changes multiple times every seconds or need access to request/response, then using this is better
            //, else use getStaticProps()
// export async function getServerSideProps(context) {
//     // access to incoming requests and response via the context keyword by req and res property
//     const req= context.req;
//     const res = context.res;

//     // can still fetch data from an API, also runs on server like below function    
//         // no need for revalidate, since it re renders on every request.
//     return {
//         props: {DUMMY_MEETUPS}
//     }
// }

// This is the function to data fetch for static pages, can be asynchronous
    // This code won't ever execute on the client side -> never executes on page os user's pages.
export async function getStaticProps() {
    // fetch data from an API, always return an object in here
        // the props property of the return object is an object itself and is the props sent up to HomePage(props) above
            // This function removes the need for useState and useEffect in the HomePage() Fn above.
                // What would normally represent getting data from a backend is no longer needed because the props
                    // sent up props to the component function above
                        // can be fetched in this function and sent in, which in the end happens
                            // in the pre-render process(Server Side) rather than on the client side like above does
        
    // No need to call and create another API route to fetch from, can just do API route creation and call in here?
        // Similar to call in new-meetup.js
        
    const client = await MongoClient.connect("mongodb+srv://Xander_Mik:Isaiah55@cluster0.hjuun.mongodb.net/testDb?retryWrites=true&w=majority")
        // get hold of database by:
    const db = client.db();

    // get access to meetups collection which is in the DB -> NoSQL DB collections full of documents in MongoDB
    const meetupsCollection = db.collection('meetups')

    // an async task that returns a promise, returns all documents in collection by default -> change to array of docs/objects
    const meetups = await meetupsCollection.find().toArray();

    // close connection to DB once done
    client.close();

    return{
        // map this to new array becuase id field is weird in MongoDb and is _id first and seconds it's value is Object wrapped around something
            //map to a new array  with _id.toString(), also we only need image, title, and address, no description
                // make sure to wrap object in () or else the pproperties will return random unknown errors
        props: {
            meetups: meetups.map(meetup => ({
                title: meetup.title,
                address: meetup.address,
                image: meetup.image,
                id: meetup._id.toString()
            }))
        },
        // Problem with this, it only calls on the beginning, data can be outdated if no client-side updating
            // so if a new meetup was added to the backend, it wouldn't show on the page because pre-render
                //  only shows whats initially called not what's added
        // This revalidate property fixes that by revalidating the page every # of seconds,
            // so if new data is added to the backend, will show on the number of seconds shown.
        // If you want to rebuild on every request, use a different function server side rendering by(getServerSideProps())
        revalidate: 1
    };
}

export default HomePage;